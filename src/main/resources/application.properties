
#servlet container properties
server.servlet.context-path=/rest
#server.port=8083
#server.host=localhost
#server.tomcat.max-threads=200
#server.connection-timeout=5s
#server.max-http-header-size=8KB
#server.tomcat.max-swallow-size=2MB
#server.tomcat.max-http-post-size=2MB

# above https request timeout



# below autoconfiguration d
# ataSource properties get evaluated, only if the user has not programatically created DataSource themselves as @Bean.
# Because @Conditional exists on the implemented Hikari bean method.
#Hence note that in general Note that the auto-configuration is only in effect, if the auto-configured beans are not defined in the application explicityl. If you define your bean, then the default one will be overridden.
#https://www.marcobehler.com/guides/spring-boot
#https://www.baeldung.com/spring-boot-custom-auto-configuration


# DataSource properties read during autoconfiguration process of instantiating DataSource bean (i.e Hikari is the default DataSource implementation with Spring Boot 2)
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/pmaddb
#spring.datasource.username=postgres
#spring.datasource.password=Kvihar@24

#study below properties and lifecycle of connection obejcts in the pool.
#HikariCP DataSource connection pool properties . override default hikari CP pool properties
spring.datasource.hikari.connection-timeout = 20000 #maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.minimum-idle= 10 #minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.maximum-pool-size= 10 #maximum pool size
spring.datasource.hikari.idle-timeout=10000 #maximum idle time for connection
spring.datasource.hikari.max-lifetime= 1000 # maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.auto-commit =false #default auto-commit behavior.


#Tomcat jdbc Datasource connection pool properties
#spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
#spring.datasource.tomcat.initial-size=15
#spring.datasource.tomcat.max-wait=20000
#spring.datasource.tomcat.max-active=50
#spring.datasource.tomcat.max-idle=15
#spring.datasource.tomcat.min-idle=8
#spring.datasource.tomcat.default-auto-commit=false

#Question: when default embedded webserver is tomcat why is Hikari DataSource implementation used instead of tomcat. Shouldnt we stick of same that belongs to the webserver.